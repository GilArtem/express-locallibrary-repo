extends layout

block content

  h1 #{title}

  form(method='POST')
    div.form-group
      label(for='name') Жанр:
      input#name.form-control(type='text', placeholder='Фантастика, поэзия и т.д.' name='name' required value=(undefined===genre ? '' : genre.name) )
    button.btn.btn-primary(type='submit') Отправить

  if errors
    ul
      for error in errors
        li!= error.msg


//- 1. extends layout:
//- Указывает, что этот шаблон расширяет базовый шаблон layout.pug. Это означает, что он наследует структуру и стили, определенные в layout.pug.

//- 2.block content:
//- Открывает блок content, который будет заполняться содержимым, специфичным для этой страницы.

//- 3.h1 #{title}:
//- Отображает заголовок страницы, используя переменную title. Значение переменной title будет установлено в контроллере, который рендерит этот шаблон.

//- 4.form(method='POST'):
//- Начинает форму, которая будет отправлена методом POST.

//- 5.div.form-group:
//- Создает контейнер с классом form-group для стилизации поля ввода и его метки.

//- 6.label(for='name') Genre::
//- Создает метку для поля ввода с идентификатором name. Текст метки - "Genre:".
//- 7.input#name.form-control(type='text', placeholder='Fantasy, Poetry etc.' name='name' required value=(undefined===genre ? '' : genre.name)):
//- Создает поле ввода с типом text, идентификатором name и классом form-control для стилизации.

//- 8.placeholder='Fantasy, Poetry etc.' задает текст-заполнитель, который показывается, когда поле ввода пустое.
//-     name='name' задает имя поля ввода, которое будет использоваться при отправке формы.
//-     required указывает, что это поле обязательно для заполнения.
//-     value=(undefined===genre ? '' : genre.name) задает значение поля ввода. Если переменная genre не определена, значение будет пустой строкой. В противном случае, значение будет равно genre.name.   
//-     button.btn.btn-primary(type='submit') Submit:
//- Создает кнопку с типом submit и классами btn и btn-primary для стилизации. Текст на кнопке - "Submit".

//- 9.if errors:
//- Проверяет, есть ли ошибки в переменной errors.

//- 10.ul:
//- Создает ненумерованный список для отображения ошибок, если они есть.

//- 11.for error in errors:
//- Итерация по массиву errors, который содержит ошибки валидации.

//- 12.li!= error.msg:
//- Создает элемент списка для каждой ошибки и отображает сообщение об ошибке (error.msg). Использование != позволяет интерпретировать HTML в сообщении об ошибке, если таковой имеется.

//- Этот шаблон отображает форму для создания или редактирования жанра. Он включает поле ввода для названия жанра, кнопку отправки формы и отображает ошибки валидации, если они присутствуют. Значения для заголовка страницы, жанра и ошибок передаются в шаблон из контроллера, который обрабатывает соответствующий запрос.